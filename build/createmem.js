/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI28035 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI28017 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI28021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI28017.base = NTI28035;
var NNI28021 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI28017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI28017, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI28017, name: "Field2", sons: null}]};
NTI28021.node = NNI28021;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }

function get_context2d_27054(cv_27056) {
	var result_27057 = null;

		result_27057 = cv_27056.getContext('2d');

	return result_27057;

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function new_palette_28085() {
	var result_28087 = [{Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}];

		L1: do {
			var i_28100 = 0;
			var res_28113 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_28113 <= 15)) break L3;
						i_28100 = res_28113;
						var l_28101 = Math.trunc(i_28100 / 8);
						var r_28102 = Math.trunc(Math.trunc(i_28100 / 4) % 2);
						var g_28103 = Math.trunc(Math.trunc(i_28100 / 2) % 2);
						var b_28104 = Math.trunc(i_28100 % 2);
						nimCopy(result_28087[i_28100], {Field0: ((l_28101 * 5) + (r_28102 * 10)), Field1: ((l_28101 * 5) + (g_28103 * 10)), Field2: ((l_28101 * 5) + (b_28104 * 10))}, NTI28021);
						res_28113 += 1;
					}
			} while(false);
		} while(false);

	return result_28087;

}

function new_character_28312() {
	var result_28314 = arrayConstr(64, 0, NTI28017);

		L1: do {
			var i_28325 = 0;
			var i_28329 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_28329 < 64)) break L3;
						i_28325 = i_28329;
						result_28314[i_28325] = 0;
						i_28329 += 1;
					}
			} while(false);
		} while(false);

	return result_28314;

}

function fill_rect_27091(ctx_27093, x_27094, y_27095, width_27096, height_27097) {
		ctx_27093.fillRect(x_27094, y_27095, width_27096, height_27097);

	
}

function to_hex_28130(n_28132) {
		var Tmp1;

	var result_28133 = null;

		switch (n_28132) {
		case 10:
			Tmp1 = makeNimstrLit("A");
			break;
		case 11:
			Tmp1 = makeNimstrLit("B");
			break;
		case 12:
			Tmp1 = makeNimstrLit("C");
			break;
		case 13:
			Tmp1 = makeNimstrLit("D");
			break;
		case 14:
			Tmp1 = makeNimstrLit("E");
			break;
		case 15:
			Tmp1 = makeNimstrLit("F");
			break;
		default: 
			Tmp1 = cstrToNimstr((n_28132)+"");
			break;
		}
		result_28133 = nimCopy(null, Tmp1, NTI138);

	return result_28133;

}

function HEX24_28178(color_28180) {
	var result_28181 = null;

		result_28181 = nimCopy(null, (to_hex_28130(color_28180.Field0)).concat(to_hex_28130(color_28180.Field1),to_hex_28130(color_28180.Field2)), NTI138);

	return result_28181;

}

function draw_character_28344(ctx_28346, ch_28347, pal_28348, x_28349, y_28350, size_28351) {
		L1: do {
			var row_28361 = 0;
			var i_28380 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_28380 < 8)) break L3;
						row_28361 = i_28380;
						L4: do {
							var column_28371 = 0;
							var i_28376 = 0;
							L5: do {
									L6: while (true) {
									if (!(i_28376 < 8)) break L6;
										column_28371 = i_28376;
										ctx_28346.fillStyle = toJSStr((makeNimstrLit("#")).concat(HEX24_28178(pal_28348[ch_28347[((row_28361 * 8) + column_28371)]])));
										fill_rect_27091(ctx_28346, (x_28349 + (column_28371 * size_28351)), (y_28350 + (row_28361 * size_28351)), size_28351, size_28351);
										i_28376 += 1;
									}
							} while(false);
						} while(false);
						i_28380 += 1;
					}
			} while(false);
		} while(false);

	
}

function draw_palette_28395(ctx_28397, pal_28398, x_28399, y_28400, width_28401, height_28402) {
		L1: do {
			var i_28415 = 0;
			var res_28420 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_28420 <= 15)) break L3;
						i_28415 = res_28420;
						ctx_28397.fillStyle = toJSStr((makeNimstrLit("#")).concat(HEX24_28178(pal_28398[i_28415])));
						fill_rect_27091(ctx_28397, (x_28399 + ((i_28415 & 7) * width_28401)), (y_28400 + (Math.trunc(i_28415 / 8) * height_28402)), width_28401, height_28402);
						res_28420 += 1;
					}
			} while(false);
		} while(false);

	
}

function stroke_rect_27111(ctx_27113, x_27114, y_27115, width_27116, height_27117) {
		ctx_27113.strokeRect(x_27114, y_27115, width_27116, height_27117);

	
}

function draw_cursor_28437(ctx_28439, cursor_28440, x_28441, y_28442, width_28443, height_28444) {
		ctx_28439.lineWidth = 3.0000000000000000e+00;
		ctx_28439.strokeStyle = "#ff6";
		stroke_rect_27111(ctx_28439, (x_28441 + ((cursor_28440 & 7) * width_28443)), (y_28442 + (Math.trunc(cursor_28440 / 8) * height_28444)), width_28443, height_28444);

	
}

function HEX24_28195(palette_28197) {
	var result_28198 = null;

		result_28198 = nimCopy(null, [], NTI138);
		L1: do {
			var i_28211 = 0;
			var res_28215 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_28215 <= 15)) break L3;
						i_28211 = res_28215;
						if (result_28198 != null) { result_28198 = (result_28198).concat((HEX24_28178(palette_28197[i_28211])).concat(makeNimstrLit("\x0A"))); } else { result_28198 = (HEX24_28178(palette_28197[i_28211])).concat(makeNimstrLit("\x0A")).slice(); };
						res_28215 += 1;
					}
			} while(false);
		} while(false);

	return result_28198;

}

function HEX24_28232(character_28234) {
	var result_28235 = null;

		result_28235 = nimCopy(null, [], NTI138);
		L1: do {
			var i_28271 = 0;
			var i_28276 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_28276 < 64)) break L3;
						i_28271 = i_28276;
						if (result_28235 != null) { result_28235 = (result_28235).concat((to_hex_28130(character_28234[i_28271])).concat(makeNimstrLit("\x0A"))); } else { result_28235 = (to_hex_28130(character_28234[i_28271])).concat(makeNimstrLit("\x0A")).slice(); };
						i_28276 += 1;
					}
			} while(false);
		} while(false);

	return result_28235;

}

function contains_28654(s_28661, value_28663) {
	var result_28664 = false;

		result_28664 = ((s_28661.a <= value_28663) && (value_28663 <= s_28661.b));

	return result_28664;

}

function HEX2EHEX2E_28615(a_28620, b_28622) {
	var result_28630 = {a: 0, b: 0};

		result_28630.a = a_28620;
		result_28630.b = b_28622;

	return result_28630;

}

function to_uint4_28151(c_28153) {
		var Tmp1;

	var result_28154 = 0;

		switch (c_28153) {
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
			Tmp1 = (((c_28153)|0) - 48);
			break;
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
			Tmp1 = ((((c_28153)|0) - 97) + 10);
			break;
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
			Tmp1 = ((((c_28153)|0) - 65) + 10);
			break;
		default: 
			Tmp1 = 0;
			break;
		}
		result_28154 = Tmp1;

	return result_28154;

}

function parse_color_28291(colstr_28293) {
	var result_28294 = {Field0: 0, Field1: 0, Field2: 0};

		nimCopy(result_28294, {Field0: to_uint4_28151(colstr_28293.charCodeAt(1)), Field1: to_uint4_28151(colstr_28293.charCodeAt(2)), Field2: to_uint4_28151(colstr_28293.charCodeAt(3))}, NTI28021);

	return result_28294;

}

function HEX3Aanonymous_28461(ev0_28463) {

		function HEX3Aanonymous_28484(ev_28486) {
				download(toJSStr(HEX24_28195(palette_28469)), "palette.mem", "text/plain");

			
		}

		function HEX3Aanonymous_28501(ev_28503) {
				download(toJSStr(HEX24_28232(character_28470)), "character.mem", "text/plain");

			
		}

		function HEX3Aanonymous_28518(ev_28520) {
					var Tmp1;
					var Tmp2;

				var mouse_x_28521 = ev_28520.offsetX;
				var mouse_y_28522 = ev_28520.offsetY;
					if (!contains_28654(HEX2EHEX2E_28615(60, 339), mouse_x_28521)) Tmp1 = false; else {						Tmp1 = contains_28654(HEX2EHEX2E_28615(10, 289), mouse_y_28522);					}				if (Tmp1) {
				var pos_28844 = (Math.trunc((mouse_x_28521 - 60) / 35) + (Math.trunc((mouse_y_28522 - 10) / 35) * 8));
				character_28470[pos_28844] = cursor_28471;
				draw_character_28344(ctx_28465, character_28470, palette_28469, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
				}
				else {
					if (!contains_28654(HEX2EHEX2E_28615(20, 379), mouse_x_28521)) Tmp2 = false; else {						Tmp2 = contains_28654(HEX2EHEX2E_28615(320, 379), mouse_y_28522);					}				if (Tmp2) {
				var pos_29245 = (Math.trunc((mouse_x_28521 - 20) / 45) + (Math.trunc((mouse_y_28522 - 320) / 30) * 8));
				cursor_28471 = pos_29245;
				ctx_28465.fillStyle = "#444";
				fill_rect_27091(ctx_28465, 0.0, 3.0000000000000000e+02, 4.0000000000000000e+02, 1.0000000000000000e+02);
				draw_palette_28395(ctx_28465, palette_28469, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
				draw_cursor_28437(ctx_28465, cursor_28471, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
				palette_color_input_28468.value = toJSStr((makeNimstrLit("#")).concat(HEX24_28178(palette_28469[cursor_28471])));
				}
				}
				is_mouse_down_28472 = false;

			
		}

		function HEX3Aanonymous_29279(ev_29281) {
					var Tmp1;
					var Tmp2;

				var mouse_x_29282 = ev_29281.offsetX;
				var mouse_y_29283 = ev_29281.offsetY;
					if (!is_mouse_down_28472) Tmp2 = false; else {						Tmp2 = contains_28654(HEX2EHEX2E_28615(60, 339), mouse_x_29282);					}					if (!Tmp2) Tmp1 = false; else {						Tmp1 = contains_28654(HEX2EHEX2E_28615(10, 289), mouse_y_29283);					}				if (Tmp1) {
				var pos_29644 = (Math.trunc((mouse_x_29282 - 60) / 35) + (Math.trunc((mouse_y_29283 - 10) / 35) * 8));
				character_28470[pos_29644] = cursor_28471;
				draw_character_28344(ctx_28465, character_28470, palette_28469, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
				}
				

			
		}

		function HEX3Aanonymous_29661(ev_29663) {
				is_mouse_down_28472 = true;

			
		}

		function HEX3Aanonymous_29677(ev_29679) {
				if (palette_color_input_28468.validity.valid) {
				nimCopy(palette_28469[cursor_28471], parse_color_28291(palette_color_input_28468.value), NTI28021);
				draw_character_28344(ctx_28465, character_28470, palette_28469, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
				ctx_28465.fillStyle = "#444";
				fill_rect_27091(ctx_28465, 0.0, 3.0000000000000000e+02, 4.0000000000000000e+02, 1.0000000000000000e+02);
				draw_palette_28395(ctx_28465, palette_28469, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
				draw_cursor_28437(ctx_28465, cursor_28471, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
				}
				

			
		}

		var canvas_28464 = document.getElementById("main-canvas");
		var ctx_28465 = get_context2d_27054(canvas_28464);
		var dl_palette_button_28466 = document.getElementById("palette.mem");
		var dl_character_button_28467 = document.getElementById("character.mem");
		var palette_color_input_28468 = document.getElementById("palette-color");
		var palette_28469 = new_palette_28085();
		var character_28470 = new_character_28312();
		var cursor_28471 = 0;
		var is_mouse_down_28472 = false;
		ctx_28465.fillStyle = "#444";
		fill_rect_27091(ctx_28465, 0.0, 0.0, 4.0000000000000000e+02, 4.0000000000000000e+02);
		draw_character_28344(ctx_28465, character_28470, palette_28469, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
		ctx_28465.fillStyle = "#444";
		fill_rect_27091(ctx_28465, 0.0, 3.0000000000000000e+02, 4.0000000000000000e+02, 1.0000000000000000e+02);
		draw_palette_28395(ctx_28465, palette_28469, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
		draw_cursor_28437(ctx_28465, cursor_28471, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
		palette_color_input_28468.value = toJSStr((makeNimstrLit("#")).concat(HEX24_28178(palette_28469[cursor_28471])));
		dl_palette_button_28466.addEventListener("click", HEX3Aanonymous_28484, false);
		dl_character_button_28467.addEventListener("click", HEX3Aanonymous_28501, false);
		canvas_28464.addEventListener("mouseup", HEX3Aanonymous_28518, false);
		canvas_28464.addEventListener("mousemove", HEX3Aanonymous_29279, false);
		canvas_28464.addEventListener("mousedown", HEX3Aanonymous_29661, false);
		palette_color_input_28468.addEventListener("input", HEX3Aanonymous_29677, false);

	
}
window.addEventListener("DOMContentLoaded", HEX3Aanonymous_28461, false);
