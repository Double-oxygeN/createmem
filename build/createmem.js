/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI28026 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI28016 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI28020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI28016.base = NTI28026;
var NNI28020 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI28016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI28016, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI28016, name: "Field2", sons: null}]};
NTI28020.node = NNI28020;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }

function get_context2d_27054(cv_27056) {
	var result_27057 = null;

		result_27057 = cv_27056.getContext('2d');

	return result_27057;

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function new_palette_28070() {
	var result_28072 = [{Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}];

		L1: do {
			var i_28085 = 0;
			var res_28098 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_28098 <= 15)) break L3;
						i_28085 = res_28098;
						var l_28086 = Math.trunc(i_28085 / 8);
						var r_28087 = Math.trunc(Math.trunc(i_28085 / 4) % 2);
						var g_28088 = Math.trunc(Math.trunc(i_28085 / 2) % 2);
						var b_28089 = Math.trunc(i_28085 % 2);
						nimCopy(result_28072[i_28085], {Field0: ((l_28086 * 5) + (r_28087 * 10)), Field1: ((l_28086 * 5) + (g_28088 * 10)), Field2: ((l_28086 * 5) + (b_28089 * 10))}, NTI28020);
						res_28098 += 1;
					}
			} while(false);
		} while(false);

	return result_28072;

}

function new_character_28249() {
	var result_28251 = arrayConstr(64, 0, NTI28016);

		L1: do {
			var i_28262 = 0;
			var i_28266 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_28266 < 64)) break L3;
						i_28262 = i_28266;
						result_28251[i_28262] = 0;
						i_28266 += 1;
					}
			} while(false);
		} while(false);

	return result_28251;

}

function fill_rect_27091(ctx_27093, x_27094, y_27095, width_27096, height_27097) {
		ctx_27093.fillRect(x_27094, y_27095, width_27096, height_27097);

	
}

function to_hex_28115(n_28117) {
		var Tmp1;

	var result_28118 = null;

		switch (n_28117) {
		case 10:
			Tmp1 = makeNimstrLit("A");
			break;
		case 11:
			Tmp1 = makeNimstrLit("B");
			break;
		case 12:
			Tmp1 = makeNimstrLit("C");
			break;
		case 13:
			Tmp1 = makeNimstrLit("D");
			break;
		case 14:
			Tmp1 = makeNimstrLit("E");
			break;
		case 15:
			Tmp1 = makeNimstrLit("F");
			break;
		default: 
			Tmp1 = cstrToNimstr((n_28117)+"");
			break;
		}
		result_28118 = nimCopy(null, Tmp1, NTI138);

	return result_28118;

}

function HEX24_28136(color_28138) {
	var result_28139 = null;

		result_28139 = nimCopy(null, (to_hex_28115(color_28138.Field0)).concat(to_hex_28115(color_28138.Field1),to_hex_28115(color_28138.Field2)), NTI138);

	return result_28139;

}

function draw_character_28281(ctx_28283, ch_28284, pal_28285, x_28286, y_28287, size_28288) {
		L1: do {
			var row_28298 = 0;
			var i_28317 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_28317 < 8)) break L3;
						row_28298 = i_28317;
						L4: do {
							var column_28308 = 0;
							var i_28313 = 0;
							L5: do {
									L6: while (true) {
									if (!(i_28313 < 8)) break L6;
										column_28308 = i_28313;
										ctx_28283.fillStyle = toJSStr((makeNimstrLit("#")).concat(HEX24_28136(pal_28285[ch_28284[((row_28298 * 8) + column_28308)]])));
										fill_rect_27091(ctx_28283, (x_28286 + (column_28308 * size_28288)), (y_28287 + (row_28298 * size_28288)), size_28288, size_28288);
										i_28313 += 1;
									}
							} while(false);
						} while(false);
						i_28317 += 1;
					}
			} while(false);
		} while(false);

	
}

function draw_palette_28332(ctx_28334, pal_28335, x_28336, y_28337, width_28338, height_28339) {
		L1: do {
			var i_28352 = 0;
			var res_28357 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_28357 <= 15)) break L3;
						i_28352 = res_28357;
						ctx_28334.fillStyle = toJSStr((makeNimstrLit("#")).concat(HEX24_28136(pal_28335[i_28352])));
						fill_rect_27091(ctx_28334, (x_28336 + ((i_28352 & 7) * width_28338)), (y_28337 + (Math.trunc(i_28352 / 8) * height_28339)), width_28338, height_28339);
						res_28357 += 1;
					}
			} while(false);
		} while(false);

	
}

function stroke_rect_27111(ctx_27113, x_27114, y_27115, width_27116, height_27117) {
		ctx_27113.strokeRect(x_27114, y_27115, width_27116, height_27117);

	
}

function draw_cursor_28374(ctx_28376, cursor_28377, x_28378, y_28379, width_28380, height_28381) {
		ctx_28376.lineWidth = 3.0000000000000000e+00;
		ctx_28376.strokeStyle = "#ff6";
		stroke_rect_27111(ctx_28376, (x_28378 + ((cursor_28377 & 7) * width_28380)), (y_28379 + (Math.trunc(cursor_28377 / 8) * height_28381)), width_28380, height_28381);

	
}

function HEX24_28153(palette_28155) {
	var result_28156 = null;

		result_28156 = nimCopy(null, [], NTI138);
		L1: do {
			var i_28169 = 0;
			var res_28173 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_28173 <= 15)) break L3;
						i_28169 = res_28173;
						if (result_28156 != null) { result_28156 = (result_28156).concat((HEX24_28136(palette_28155[i_28169])).concat(makeNimstrLit("\x0A"))); } else { result_28156 = (HEX24_28136(palette_28155[i_28169])).concat(makeNimstrLit("\x0A")).slice(); };
						res_28173 += 1;
					}
			} while(false);
		} while(false);

	return result_28156;

}

function HEX24_28190(character_28192) {
	var result_28193 = null;

		result_28193 = nimCopy(null, [], NTI138);
		L1: do {
			var i_28229 = 0;
			var i_28234 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_28234 < 64)) break L3;
						i_28229 = i_28234;
						if (result_28193 != null) { result_28193 = (result_28193).concat((to_hex_28115(character_28192[i_28229])).concat(makeNimstrLit("\x0A"))); } else { result_28193 = (to_hex_28115(character_28192[i_28229])).concat(makeNimstrLit("\x0A")).slice(); };
						i_28234 += 1;
					}
			} while(false);
		} while(false);

	return result_28193;

}

function contains_28654(s_28661, value_28663) {
	var result_28664 = false;

		result_28664 = ((s_28661.a <= value_28663) && (value_28663 <= s_28661.b));

	return result_28664;

}

function HEX2EHEX2E_28615(a_28620, b_28622) {
	var result_28630 = {a: 0, b: 0};

		result_28630.a = a_28620;
		result_28630.b = b_28622;

	return result_28630;

}

function HEX3Aanonymous_28398(ev0_28400) {

		function HEX3Aanonymous_28418(ev_28420) {
				download(toJSStr(HEX24_28153(palette_28406)), "palette.mem", "text/plain");

			
		}

		function HEX3Aanonymous_28435(ev_28437) {
				download(toJSStr(HEX24_28190(character_28407)), "character.mem", "text/plain");

			
		}

		function HEX3Aanonymous_28452(ev_28454) {
					var Tmp1;
					var Tmp2;

				var mouse_x_28455 = ev_28454.offsetX;
				var mouse_y_28456 = ev_28454.offsetY;
					if (!contains_28654(HEX2EHEX2E_28615(60, 339), mouse_x_28455)) Tmp1 = false; else {						Tmp1 = contains_28654(HEX2EHEX2E_28615(10, 289), mouse_y_28456);					}				if (Tmp1) {
				var pos_28844 = (Math.trunc((mouse_x_28455 - 60) / 35) + (Math.trunc((mouse_y_28456 - 10) / 35) * 8));
				character_28407[pos_28844] = cursor_28408;
				draw_character_28281(ctx_28402, character_28407, palette_28406, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
				}
				else {
					if (!contains_28654(HEX2EHEX2E_28615(20, 379), mouse_x_28455)) Tmp2 = false; else {						Tmp2 = contains_28654(HEX2EHEX2E_28615(320, 379), mouse_y_28456);					}				if (Tmp2) {
				var pos_29245 = (Math.trunc((mouse_x_28455 - 20) / 45) + (Math.trunc((mouse_y_28456 - 320) / 30) * 8));
				cursor_28408 = pos_29245;
				draw_palette_28332(ctx_28402, palette_28406, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
				draw_cursor_28374(ctx_28402, cursor_28408, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
				}
				}
				is_mouse_down_28409 = false;

			
		}

		function HEX3Aanonymous_29272(ev_29274) {
					var Tmp1;
					var Tmp2;

				var mouse_x_29275 = ev_29274.offsetX;
				var mouse_y_29276 = ev_29274.offsetY;
					if (!is_mouse_down_28409) Tmp2 = false; else {						Tmp2 = contains_28654(HEX2EHEX2E_28615(60, 339), mouse_x_29275);					}					if (!Tmp2) Tmp1 = false; else {						Tmp1 = contains_28654(HEX2EHEX2E_28615(10, 289), mouse_y_29276);					}				if (Tmp1) {
				var pos_29644 = (Math.trunc((mouse_x_29275 - 60) / 35) + (Math.trunc((mouse_y_29276 - 10) / 35) * 8));
				character_28407[pos_29644] = cursor_28408;
				draw_character_28281(ctx_28402, character_28407, palette_28406, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
				}
				

			
		}

		function HEX3Aanonymous_29661(ev_29663) {
				is_mouse_down_28409 = true;

			
		}

		var canvas_28401 = document.getElementById("main-canvas");
		var ctx_28402 = get_context2d_27054(canvas_28401);
		var dl_palette_button_28403 = document.getElementById("palette.mem");
		var dl_character_button_28404 = document.getElementById("character.mem");
		var palette_color_input_28405 = document.getElementById("palette-color");
		var palette_28406 = new_palette_28070();
		var character_28407 = new_character_28249();
		var cursor_28408 = 0;
		var is_mouse_down_28409 = false;
		ctx_28402.fillStyle = "#444";
		fill_rect_27091(ctx_28402, 0.0, 0.0, 4.0000000000000000e+02, 4.0000000000000000e+02);
		draw_character_28281(ctx_28402, character_28407, palette_28406, 6.0000000000000000e+01, 1.0000000000000000e+01, 3.5000000000000000e+01);
		draw_palette_28332(ctx_28402, palette_28406, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
		draw_cursor_28374(ctx_28402, cursor_28408, 2.0000000000000000e+01, 3.2000000000000000e+02, 4.5000000000000000e+01, 3.0000000000000000e+01);
		dl_palette_button_28403.addEventListener("click", HEX3Aanonymous_28418, false);
		dl_character_button_28404.addEventListener("click", HEX3Aanonymous_28435, false);
		canvas_28401.addEventListener("mouseup", HEX3Aanonymous_28452, false);
		canvas_28401.addEventListener("mousemove", HEX3Aanonymous_29272, false);
		canvas_28401.addEventListener("mousedown", HEX3Aanonymous_29661, false);

	
}
window.addEventListener("DOMContentLoaded", HEX3Aanonymous_28398, false);
